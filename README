
#project name:
    "store_db"
#defenition
    handl store debts 
#language
    c
####################################################
##architecture 
#  store.h :
        Engaged in philosophy of store : data struct ,compair data and validate 
        revealing "incondition" and "all_valid" functions to store.db (signature) 

        /\
        ||
#       store.c:
                implementing all function to handl data

#         string_handl.c
# /\      string_handl.h 
  ||         /\
  ||_________||        
#       store_db.c:
                "orgenise_db" function build the database reading from debts.csv, useing "parse" and"set_new" functions
                "parse_query" function parse query string and returen "after_pars" struct        
        ||  
        \/ 

#       store_db.h:
                revealing the database functions to main_local / main_server (signature)
        /\
        ||
        \_main_local.c:
                initial database(linked list)using "orgenize_db" function
                user interface
                use "parse_query", "show_db" ,"show_select" ,"set_new" functions
                use "show_db" , "show_select" functions
                define the "print_buf" function 

#       debts.CSV
                the database file

## flow
        [main progrem]
                initial database 
                input user 
                [query string] --> parse_query func \
                                                     |
                ["after_pars" struct]           <----|
                   ||
                   \/
        "struct after_pars
        {
        enum Q_TYPE q_type  ------------> [PRINT|SELECT|SET|ERROR|QUIT]
                union                                           
                {                                       
                select_props sp   
                client *new 
                char error_str[200] 
                }
        }"                              the progrem works acording to what returned in "atter pars"
                                        in case the progrem need returen database data it passesd as arguments
                                        the target function and the buffer as argumenet to the "show_db" or "show_select" 
                                        function "print_buf" if the buufer is full 
                                        the function execute the target function and continue
#       how to use :
                make main_local : compile progrem
                make run : run the aplication
                clean : clean all object file and run files 
                see more options in makefile..